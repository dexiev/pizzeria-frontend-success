{"ast":null,"code":"import API from \"../../API\";\nimport { signInAction, signUpAction, signOutAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\nconst api = new API();\nconst LOGIN_USER_KEY = \"LOGIN_USER_KEY\";\nexport const fetchUserFromLocalStorage = () => {\n  return async dispatch => {\n    const userJSON = localStorage.getItem(LOGIN_USER_KEY);\n    if (userJSON && userJSON.token !== \"\") {\n      dispatch(signInAction(JSON.parse(userJSON)));\n    }\n  };\n};\nexport const signUp = (user_name, email, password) => {\n  return async dispatch => {\n    // Validation\n    if (user_name === \"\" || email === \"\" || password === \"\") {\n      alert(\"Please fill out name, email, and password.\");\n      return false;\n    }\n    return api.signUp(user_name, email, password).then(user => {\n      dispatch(signUpAction(user));\n      localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n      dispatch(push(\"/\"));\n    }).catch(error => {\n      alert(\"Failed to connect API \");\n      console.log(error);\n    });\n  };\n};\nexport const signIn = (email, password) => {\n  return async dispatch => {\n    // Validation\n    if (email === \"\" || password === \"\") {\n      alert(\"Please fill out email and password.\");\n      return false;\n    }\n    return api.signIn(email, password).then(user => {\n      dispatch(signInAction(user));\n      localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n      dispatch(push(\"/\"));\n    }).catch(error => {\n      alert(\"Failed to connect API to add a post\");\n      console.log(error);\n    });\n  };\n};\nexport const signOut = () => {\n  return async dispatch => {\n    dispatch(signOutAction());\n    localStorage.removeItem(LOGIN_USER_KEY);\n    dispatch(push(\"/signin\"));\n  };\n};","map":{"version":3,"names":["API","signInAction","signUpAction","signOutAction","push","api","LOGIN_USER_KEY","fetchUserFromLocalStorage","dispatch","userJSON","localStorage","getItem","token","JSON","parse","signUp","user_name","email","password","alert","then","user","setItem","stringify","catch","error","console","log","signIn","signOut","removeItem"],"sources":["C:/Users/User/Desktop/Dino-s_Pizzeria/frontend/src/reducks/user/operations.js"],"sourcesContent":["import API from \"../../API\";\nimport { signInAction, signUpAction, signOutAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\n\nconst api = new API();\nconst LOGIN_USER_KEY = \"LOGIN_USER_KEY\";\n\nexport const fetchUserFromLocalStorage = () => {\n  return async (dispatch) => {\n    const userJSON = localStorage.getItem(LOGIN_USER_KEY);\n    if (userJSON && userJSON.token !== \"\") {\n      dispatch(signInAction(JSON.parse(userJSON)));\n    }\n  };\n};\n\nexport const signUp = (user_name, email, password) => {\n  return async (dispatch) => {\n    // Validation\n    if (user_name === \"\" || email === \"\" || password === \"\") {\n      alert(\"Please fill out name, email, and password.\");\n      return false;\n    }\n\n    return api\n      .signUp(user_name, email, password)\n      .then((user) => {\n        dispatch(signUpAction(user));\n        localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n        dispatch(push(\"/\"));\n      })\n      .catch((error) => {\n        alert(\"Failed to connect API \");\n        console.log(error);\n      });\n  };\n};\n\nexport const signIn = (email, password) => {\n  return async (dispatch) => {\n    // Validation\n    if (email === \"\" || password === \"\") {\n      alert(\"Please fill out email and password.\");\n      return false;\n    }\n\n    return api\n      .signIn(email, password)\n      .then((user) => {\n        dispatch(signInAction(user));\n        localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n        dispatch(push(\"/\"));\n      })\n      .catch((error) => {\n        alert(\"Failed to connect API to add a post\");\n        console.log(error);\n      });\n  };\n};\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    dispatch(signOutAction());\n    localStorage.removeItem(LOGIN_USER_KEY);\n    dispatch(push(\"/signin\"));\n  };\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,WAAW;AAC3B,SAASC,YAAY,EAAEC,YAAY,EAAEC,aAAa,QAAQ,WAAW;AACrE,SAASC,IAAI,QAAQ,wBAAwB;AAE7C,MAAMC,GAAG,GAAG,IAAIL,GAAG,CAAC,CAAC;AACrB,MAAMM,cAAc,GAAG,gBAAgB;AAEvC,OAAO,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;EAC7C,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAACL,cAAc,CAAC;IACrD,IAAIG,QAAQ,IAAIA,QAAQ,CAACG,KAAK,KAAK,EAAE,EAAE;MACrCJ,QAAQ,CAACP,YAAY,CAACY,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC,CAAC,CAAC;IAC9C;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMM,MAAM,GAAGA,CAACC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACpD,OAAO,MAAOV,QAAQ,IAAK;IACzB;IACA,IAAIQ,SAAS,KAAK,EAAE,IAAIC,KAAK,KAAK,EAAE,IAAIC,QAAQ,KAAK,EAAE,EAAE;MACvDC,KAAK,CAAC,4CAA4C,CAAC;MACnD,OAAO,KAAK;IACd;IAEA,OAAOd,GAAG,CACPU,MAAM,CAACC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,CAAC,CAClCE,IAAI,CAAEC,IAAI,IAAK;MACdb,QAAQ,CAACN,YAAY,CAACmB,IAAI,CAAC,CAAC;MAC5BX,YAAY,CAACY,OAAO,CAAChB,cAAc,EAAEO,IAAI,CAACU,SAAS,CAACF,IAAI,CAAC,CAAC;MAC1Db,QAAQ,CAACJ,IAAI,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC,CAAC,CACDoB,KAAK,CAAEC,KAAK,IAAK;MAChBN,KAAK,CAAC,wBAAwB,CAAC;MAC/BO,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB,CAAC,CAAC;EACN,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,MAAM,GAAGA,CAACX,KAAK,EAAEC,QAAQ,KAAK;EACzC,OAAO,MAAOV,QAAQ,IAAK;IACzB;IACA,IAAIS,KAAK,KAAK,EAAE,IAAIC,QAAQ,KAAK,EAAE,EAAE;MACnCC,KAAK,CAAC,qCAAqC,CAAC;MAC5C,OAAO,KAAK;IACd;IAEA,OAAOd,GAAG,CACPuB,MAAM,CAACX,KAAK,EAAEC,QAAQ,CAAC,CACvBE,IAAI,CAAEC,IAAI,IAAK;MACdb,QAAQ,CAACP,YAAY,CAACoB,IAAI,CAAC,CAAC;MAC5BX,YAAY,CAACY,OAAO,CAAChB,cAAc,EAAEO,IAAI,CAACU,SAAS,CAACF,IAAI,CAAC,CAAC;MAC1Db,QAAQ,CAACJ,IAAI,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC,CAAC,CACDoB,KAAK,CAAEC,KAAK,IAAK;MAChBN,KAAK,CAAC,qCAAqC,CAAC;MAC5CO,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB,CAAC,CAAC;EACN,CAAC;AACH,CAAC;AAED,OAAO,MAAMI,OAAO,GAAGA,CAAA,KAAM;EAC3B,OAAO,MAAOrB,QAAQ,IAAK;IACzBA,QAAQ,CAACL,aAAa,CAAC,CAAC,CAAC;IACzBO,YAAY,CAACoB,UAAU,CAACxB,cAAc,CAAC;IACvCE,QAAQ,CAACJ,IAAI,CAAC,SAAS,CAAC,CAAC;EAC3B,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}